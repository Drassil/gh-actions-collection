name: 'action-node-setup'
description: 'It install your npm modules with cache support and injects in your pipeline extra info that can be used by your workflows (extra-info action included)'
outputs:
  github_branch:
    description: 'Github branch name'
    value: ${{ steps.prepare.outputs.github_branch }}
  package_version:
    description: 'The package version of the repository. PACKAGE_VERSION env variable is also exported.'
    value: ${{ steps.prepare.outputs.package_version }}
inputs:
  node_version:
    description: 'node version used for the node commands'
    required: false
    default: 'lts/*'
  npm_version:
    description: 'npm version used for the npm commands'
    required: false
    default: ''
  package_json_file:
    description: 'File name of the package.json where to retrieve the package version'
    required: false
    default: 'package.json'
  package_json_dir:
    description: 'Directory of the package.json where to retrieve the package version'
    required: false
    default: ''
  project_id:
    description: 'Project identifier to avoid cache collisions with other workflows'
    required: false
    default: 'default'
  install_command:
    description: 'install command. default: npm install'
    required: false
    default: 'npm install'
  cache_npm_modules:
    description: 'Enable/disable caching of the local node_modules folder'
    required: false
    type: boolean
  cache_global_npm_modules:
    description: 'Enable/disable caching of the global node_modules folder'
    required: false
    type: boolean
runs:
  using: 'composite'
  steps:
    - name: Preparation
      env:
        NODE_MODULE_DIR: ${{ inputs.package_json_dir || github.workspace }}
      uses: Drassil/gh-actions-collection/extra-info@master
      id: prepare
      with:
        npm_version: ${{ inputs.npm_version }}
        node_version: ${{ inputs.node_version }}
        package_json_path: ${{ env.NODE_MODULE_DIR }}/${{ inputs.package_json_file }}

    - name: Cache global npm
      uses: actions/cache@v3
      if: ( inputs.cache_global_npm_modules )
      env:
        cache-name: cache-${{ inputs.project_id }}-global-node-modules
        NODE_MODULE_DIR: ${{ inputs.package_json_dir || github.workspace }}
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles(format('{0}/package-lock.json', env.NODE_MODULE_DIR )) }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Cache local node_modules
      uses: actions/cache@v3
      if: ( inputs.cache_npm_modules )
      id: local-cache
      env:
        cache-name: cache-${{ inputs.project_id }}-modules
        NODE_MODULE_DIR: ${{ inputs.package_json_dir || github.workspace }}
      with:
        path: ${{ env.NODE_MODULE_DIR }}/node_modules        
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles(format('{0}/package-lock.json', env.NODE_MODULE_DIR )) }}

    - name: Install modules
      shell: bash
      if: steps.local-cache.outputs.cache-hit != 'true'
      env:
        NODE_MODULE_DIR: ${{ inputs.package_json_dir || github.workspace }}
      run: |
        cd ${{ env.NODE_MODULE_DIR }}
        echo "Count cached packages"
        mkdir -p node_modules
        ls node_modules | wc -l
        cd ${{ env.NODE_MODULE_DIR }}
        ${{ inputs.install_command }}
